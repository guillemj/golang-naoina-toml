package toml

// Code generated by peg -switch -inline parse.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleTOML
	ruleExpression
	rulenewline
	rulews
	rulewsnl
	rulecomment
	rulekeyval
	rulekey
	rulebareKey
	rulequotedKey
	ruleval
	ruletable
	rulestdTable
	rulearrayTable
	ruleinlineTable
	ruleinlineTableKeyValues
	ruletableKey
	ruletableKeyComp
	ruletableKeySep
	ruleinlineTableValSep
	ruleescaped
	ruleescape
	rulehexDigit
	rulehexQuad
	rulestring
	rulebasicString
	rulebasicChar
	rulebasicUnescaped
	rulemlBasicString
	rulemlBasicBody
	ruleliteralString
	ruleliteralChar
	rulemlLiteralString
	rulemlLiteralBody
	rulemlLiteralChar
	ruleboolean
	ruledateFullYear
	ruledateMonth
	ruledateMDay
	ruletimeHour
	ruletimeMinute
	ruletimeSecond
	ruletimeSecfrac
	ruletimeNumoffset
	ruletimeOffset
	rulepartialTime
	rulefullDate
	rulefullTime
	ruledatetime
	ruleinteger
	ruleint
	rulefloat
	rulefrac
	ruleexp
	ruledigit
	ruledigitDual
	ruledigitQuad
	rulearray
	rulearrayValues
	rulearraySep
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
)

var rul3s = [...]string{
	"Unknown",
	"TOML",
	"Expression",
	"newline",
	"ws",
	"wsnl",
	"comment",
	"keyval",
	"key",
	"bareKey",
	"quotedKey",
	"val",
	"table",
	"stdTable",
	"arrayTable",
	"inlineTable",
	"inlineTableKeyValues",
	"tableKey",
	"tableKeyComp",
	"tableKeySep",
	"inlineTableValSep",
	"escaped",
	"escape",
	"hexDigit",
	"hexQuad",
	"string",
	"basicString",
	"basicChar",
	"basicUnescaped",
	"mlBasicString",
	"mlBasicBody",
	"literalString",
	"literalChar",
	"mlLiteralString",
	"mlLiteralBody",
	"mlLiteralChar",
	"boolean",
	"dateFullYear",
	"dateMonth",
	"dateMDay",
	"timeHour",
	"timeMinute",
	"timeSecond",
	"timeSecfrac",
	"timeNumoffset",
	"timeOffset",
	"partialTime",
	"fullDate",
	"fullTime",
	"datetime",
	"integer",
	"int",
	"float",
	"frac",
	"exp",
	"digit",
	"digitDual",
	"digitQuad",
	"array",
	"arrayValues",
	"arraySep",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type tomlParser struct {
	toml

	Buffer string
	buffer []rune
	rules  [88]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *tomlParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *tomlParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *tomlParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *tomlParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *tomlParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *tomlParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *tomlParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			_ = buffer
		case ruleAction1:
			p.SetTableString(begin, end)
		case ruleAction2:
			p.Newline()
		case ruleAction3:
			p.AddKeyValue()
		case ruleAction4:
			p.SetKey(p.buffer, begin, end)
		case ruleAction5:
			p.SetKey(p.buffer, begin, end)
		case ruleAction6:
			p.SetTime(begin, end)
		case ruleAction7:
			p.SetFloat64(begin, end)
		case ruleAction8:
			p.SetInt64(begin, end)
		case ruleAction9:
			p.SetString(begin, end)
		case ruleAction10:
			p.SetBool(begin, end)
		case ruleAction11:
			p.SetArray(begin, end)
		case ruleAction12:
			p.SetTable(p.buffer, begin, end)
		case ruleAction13:
			p.SetArrayTable(p.buffer, begin, end)
		case ruleAction14:
			p.StartInlineTable()
		case ruleAction15:
			p.EndInlineTable()
		case ruleAction16:
			p.AddTableKey()
		case ruleAction17:
			p.SetBasicString(p.buffer, begin, end)
		case ruleAction18:
			p.SetMultilineBasicString()
		case ruleAction19:
			p.AddMultilineBasicQuote()
		case ruleAction20:
			p.AddMultilineBasicBody(p.buffer, begin, end)
		case ruleAction21:
			p.SetLiteralString(p.buffer, begin, end)
		case ruleAction22:
			p.SetMultilineLiteralString(p.buffer, begin, end)
		case ruleAction23:
			p.StartArray()
		case ruleAction24:
			p.AddArrayVal()
		case ruleAction25:
			p.AddArrayVal()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*tomlParser) error {
	return func(p *tomlParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*tomlParser) error {
	return func(p *tomlParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *tomlParser) Init(options ...func(*tomlParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 TOML <- <(Expression (newline Expression)* newline* !. Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleExpression]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l3
					}
					if !_rules[ruleExpression]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				{
					position6, tokenIndex6 := position, tokenIndex
					if !matchDot() {
						goto l6
					}
					goto l0
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				{
					add(ruleAction0, position)
				}
				add(ruleTOML, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <((<(ws table ws comment? (wsnl keyval ws comment?)*)> Action1) / (ws keyval ws comment?) / (ws comment?) / ws)> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				{
					position10, tokenIndex10 := position, tokenIndex
					{
						position12 := position
						if !_rules[rulews]() {
							goto l11
						}
						{
							position13 := position
							{
								position14, tokenIndex14 := position, tokenIndex
								{
									position16 := position
									if buffer[position] != rune('[') {
										goto l15
									}
									position++
									if !_rules[rulews]() {
										goto l15
									}
									{
										position17 := position
										if !_rules[ruletableKey]() {
											goto l15
										}
										add(rulePegText, position17)
									}
									if !_rules[rulews]() {
										goto l15
									}
									if buffer[position] != rune(']') {
										goto l15
									}
									position++
									{
										add(ruleAction12, position)
									}
									add(rulestdTable, position16)
								}
								goto l14
							l15:
								position, tokenIndex = position14, tokenIndex14
								{
									position19 := position
									if buffer[position] != rune('[') {
										goto l11
									}
									position++
									if buffer[position] != rune('[') {
										goto l11
									}
									position++
									if !_rules[rulews]() {
										goto l11
									}
									{
										position20 := position
										if !_rules[ruletableKey]() {
											goto l11
										}
										add(rulePegText, position20)
									}
									if !_rules[rulews]() {
										goto l11
									}
									if buffer[position] != rune(']') {
										goto l11
									}
									position++
									if buffer[position] != rune(']') {
										goto l11
									}
									position++
									{
										add(ruleAction13, position)
									}
									add(rulearrayTable, position19)
								}
							}
						l14:
							add(ruletable, position13)
						}
						if !_rules[rulews]() {
							goto l11
						}
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[rulecomment]() {
								goto l22
							}
							goto l23
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
					l23:
					l24:
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[rulewsnl]() {
								goto l25
							}
							if !_rules[rulekeyval]() {
								goto l25
							}
							if !_rules[rulews]() {
								goto l25
							}
							{
								position26, tokenIndex26 := position, tokenIndex
								if !_rules[rulecomment]() {
									goto l26
								}
								goto l27
							l26:
								position, tokenIndex = position26, tokenIndex26
							}
						l27:
							goto l24
						l25:
							position, tokenIndex = position25, tokenIndex25
						}
						add(rulePegText, position12)
					}
					{
						add(ruleAction1, position)
					}
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l29
					}
					if !_rules[rulekeyval]() {
						goto l29
					}
					if !_rules[rulews]() {
						goto l29
					}
					{
						position30, tokenIndex30 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l30
						}
						goto l31
					l30:
						position, tokenIndex = position30, tokenIndex30
					}
				l31:
					goto l10
				l29:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l32
					}
					{
						position33, tokenIndex33 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l33
						}
						goto l34
					l33:
						position, tokenIndex = position33, tokenIndex33
					}
				l34:
					goto l10
				l32:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l8
					}
				}
			l10:
				add(ruleExpression, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 2 newline <- <((('\r' '\n') / '\n') Action2)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37, tokenIndex37 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l38
					}
					position++
					if buffer[position] != rune('\n') {
						goto l38
					}
					position++
					goto l37
				l38:
					position, tokenIndex = position37, tokenIndex37
					if buffer[position] != rune('\n') {
						goto l35
					}
					position++
				}
			l37:
				{
					add(ruleAction2, position)
				}
				add(rulenewline, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 3 ws <- <(' ' / '\t')*> */
		func() bool {
			{
				position41 := position
			l42:
				{
					position43, tokenIndex43 := position, tokenIndex
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('\t') {
							goto l43
						}
						position++
					}
				l44:
					goto l42
				l43:
					position, tokenIndex = position43, tokenIndex43
				}
				add(rulews, position41)
			}
			return true
		},
		/* 4 wsnl <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') newline))*> */
		func() bool {
			{
				position47 := position
			l48:
				{
					position49, tokenIndex49 := position, tokenIndex
					{
						switch buffer[position] {
						case '\t':
							if buffer[position] != rune('\t') {
								goto l49
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l49
							}
							position++
						default:
							if !_rules[rulenewline]() {
								goto l49
							}
						}
					}

					goto l48
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(rulewsnl, position47)
			}
			return true
		},
		/* 5 comment <- <('#' <('\t' / [ -\U0010ffff])*>)> */
		func() bool {
			position51, tokenIndex51 := position, tokenIndex
			{
				position52 := position
				if buffer[position] != rune('#') {
					goto l51
				}
				position++
				{
					position53 := position
				l54:
					{
						position55, tokenIndex55 := position, tokenIndex
						{
							position56, tokenIndex56 := position, tokenIndex
							if buffer[position] != rune('\t') {
								goto l57
							}
							position++
							goto l56
						l57:
							position, tokenIndex = position56, tokenIndex56
							if c := buffer[position]; c < rune(' ') || c > rune('\U0010ffff') {
								goto l55
							}
							position++
						}
					l56:
						goto l54
					l55:
						position, tokenIndex = position55, tokenIndex55
					}
					add(rulePegText, position53)
				}
				add(rulecomment, position52)
			}
			return true
		l51:
			position, tokenIndex = position51, tokenIndex51
			return false
		},
		/* 6 keyval <- <(key ws '=' ws val Action3)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				if !_rules[rulekey]() {
					goto l58
				}
				if !_rules[rulews]() {
					goto l58
				}
				if buffer[position] != rune('=') {
					goto l58
				}
				position++
				if !_rules[rulews]() {
					goto l58
				}
				if !_rules[ruleval]() {
					goto l58
				}
				{
					add(ruleAction3, position)
				}
				add(rulekeyval, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 7 key <- <(bareKey / quotedKey)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				{
					position63, tokenIndex63 := position, tokenIndex
					{
						position65 := position
						{
							position66 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l64
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l64
									}
									position++
								case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l64
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l64
									}
									position++
								default:
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l64
									}
									position++
								}
							}

						l67:
							{
								position68, tokenIndex68 := position, tokenIndex
								{
									switch buffer[position] {
									case '_':
										if buffer[position] != rune('_') {
											goto l68
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l68
										}
										position++
									case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l68
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l68
										}
										position++
									default:
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l68
										}
										position++
									}
								}

								goto l67
							l68:
								position, tokenIndex = position68, tokenIndex68
							}
							add(rulePegText, position66)
						}
						{
							add(ruleAction4, position)
						}
						add(rulebareKey, position65)
					}
					goto l63
				l64:
					position, tokenIndex = position63, tokenIndex63
					{
						position72 := position
						{
							position73 := position
							if buffer[position] != rune('"') {
								goto l61
							}
							position++
						l74:
							{
								position75, tokenIndex75 := position, tokenIndex
								if !_rules[rulebasicChar]() {
									goto l75
								}
								goto l74
							l75:
								position, tokenIndex = position75, tokenIndex75
							}
							if buffer[position] != rune('"') {
								goto l61
							}
							position++
							add(rulePegText, position73)
						}
						{
							add(ruleAction5, position)
						}
						add(rulequotedKey, position72)
					}
				}
			l63:
				add(rulekey, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 8 bareKey <- <(<((&('_') '_') | (&('-') '-') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]))+> Action4)> */
		nil,
		/* 9 quotedKey <- <(<('"' basicChar* '"')> Action5)> */
		nil,
		/* 10 val <- <((<datetime> Action6) / (<float> Action7) / ((&('{') inlineTable) | (&('[') (<array> Action11)) | (&('f' | 't') (<boolean> Action10)) | (&('"' | '\'') (<string> Action9)) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<integer> Action8))))> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				{
					position81, tokenIndex81 := position, tokenIndex
					{
						position83 := position
						{
							position84 := position
							{
								position85, tokenIndex85 := position, tokenIndex
								{
									position87 := position
									{
										position88 := position
										{
											position89 := position
											if !_rules[ruledigitDual]() {
												goto l86
											}
											if !_rules[ruledigitDual]() {
												goto l86
											}
											add(ruledigitQuad, position89)
										}
										add(ruledateFullYear, position88)
									}
									if buffer[position] != rune('-') {
										goto l86
									}
									position++
									{
										position90 := position
										if !_rules[ruledigitDual]() {
											goto l86
										}
										add(ruledateMonth, position90)
									}
									if buffer[position] != rune('-') {
										goto l86
									}
									position++
									{
										position91 := position
										if !_rules[ruledigitDual]() {
											goto l86
										}
										add(ruledateMDay, position91)
									}
									add(rulefullDate, position87)
								}
								{
									position92, tokenIndex92 := position, tokenIndex
									if buffer[position] != rune('T') {
										goto l92
									}
									position++
									{
										position94 := position
										if !_rules[rulepartialTime]() {
											goto l92
										}
										{
											position95, tokenIndex95 := position, tokenIndex
											{
												position97 := position
												{
													position98, tokenIndex98 := position, tokenIndex
													if buffer[position] != rune('Z') {
														goto l99
													}
													position++
													goto l98
												l99:
													position, tokenIndex = position98, tokenIndex98
													{
														position100 := position
														{
															position101, tokenIndex101 := position, tokenIndex
															if buffer[position] != rune('-') {
																goto l102
															}
															position++
															goto l101
														l102:
															position, tokenIndex = position101, tokenIndex101
															if buffer[position] != rune('+') {
																goto l95
															}
															position++
														}
													l101:
														if !_rules[ruletimeHour]() {
															goto l95
														}
														if buffer[position] != rune(':') {
															goto l95
														}
														position++
														if !_rules[ruletimeMinute]() {
															goto l95
														}
														add(ruletimeNumoffset, position100)
													}
												}
											l98:
												add(ruletimeOffset, position97)
											}
											goto l96
										l95:
											position, tokenIndex = position95, tokenIndex95
										}
									l96:
										add(rulefullTime, position94)
									}
									goto l93
								l92:
									position, tokenIndex = position92, tokenIndex92
								}
							l93:
								goto l85
							l86:
								position, tokenIndex = position85, tokenIndex85
								if !_rules[rulepartialTime]() {
									goto l82
								}
							}
						l85:
							add(ruledatetime, position84)
						}
						add(rulePegText, position83)
					}
					{
						add(ruleAction6, position)
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					{
						position105 := position
						{
							position106 := position
							if !_rules[ruleinteger]() {
								goto l104
							}
							{
								position107, tokenIndex107 := position, tokenIndex
								if !_rules[rulefrac]() {
									goto l108
								}
								{
									position109, tokenIndex109 := position, tokenIndex
									if !_rules[ruleexp]() {
										goto l109
									}
									goto l110
								l109:
									position, tokenIndex = position109, tokenIndex109
								}
							l110:
								goto l107
							l108:
								position, tokenIndex = position107, tokenIndex107
								{
									position111, tokenIndex111 := position, tokenIndex
									if !_rules[rulefrac]() {
										goto l111
									}
									goto l112
								l111:
									position, tokenIndex = position111, tokenIndex111
								}
							l112:
								if !_rules[ruleexp]() {
									goto l104
								}
							}
						l107:
							add(rulefloat, position106)
						}
						add(rulePegText, position105)
					}
					{
						add(ruleAction7, position)
					}
					goto l81
				l104:
					position, tokenIndex = position81, tokenIndex81
					{
						switch buffer[position] {
						case '{':
							{
								position115 := position
								if buffer[position] != rune('{') {
									goto l79
								}
								position++
								{
									add(ruleAction14, position)
								}
								if !_rules[rulews]() {
									goto l79
								}
								{
									position117 := position
								l118:
									{
										position119, tokenIndex119 := position, tokenIndex
										if !_rules[rulekeyval]() {
											goto l119
										}
										{
											position120, tokenIndex120 := position, tokenIndex
											{
												position122 := position
												if !_rules[rulews]() {
													goto l120
												}
												if buffer[position] != rune(',') {
													goto l120
												}
												position++
												if !_rules[rulews]() {
													goto l120
												}
												add(ruleinlineTableValSep, position122)
											}
											goto l121
										l120:
											position, tokenIndex = position120, tokenIndex120
										}
									l121:
										goto l118
									l119:
										position, tokenIndex = position119, tokenIndex119
									}
									add(ruleinlineTableKeyValues, position117)
								}
								if !_rules[rulews]() {
									goto l79
								}
								if buffer[position] != rune('}') {
									goto l79
								}
								position++
								{
									add(ruleAction15, position)
								}
								add(ruleinlineTable, position115)
							}
						case '[':
							{
								position124 := position
								{
									position125 := position
									if buffer[position] != rune('[') {
										goto l79
									}
									position++
									{
										add(ruleAction23, position)
									}
									if !_rules[rulewsnl]() {
										goto l79
									}
									{
										position127, tokenIndex127 := position, tokenIndex
										{
											position129 := position
											if !_rules[ruleval]() {
												goto l127
											}
											{
												add(ruleAction24, position)
											}
										l131:
											{
												position132, tokenIndex132 := position, tokenIndex
												if !_rules[rulewsnl]() {
													goto l132
												}
												{
													position133, tokenIndex133 := position, tokenIndex
													if !_rules[rulecomment]() {
														goto l133
													}
													goto l134
												l133:
													position, tokenIndex = position133, tokenIndex133
												}
											l134:
												if !_rules[rulewsnl]() {
													goto l132
												}
												if !_rules[rulearraySep]() {
													goto l132
												}
												if !_rules[rulewsnl]() {
													goto l132
												}
												{
													position135, tokenIndex135 := position, tokenIndex
													if !_rules[rulecomment]() {
														goto l135
													}
													goto l136
												l135:
													position, tokenIndex = position135, tokenIndex135
												}
											l136:
												if !_rules[rulewsnl]() {
													goto l132
												}
												if !_rules[ruleval]() {
													goto l132
												}
												{
													add(ruleAction25, position)
												}
												goto l131
											l132:
												position, tokenIndex = position132, tokenIndex132
											}
											if !_rules[rulewsnl]() {
												goto l127
											}
											{
												position138, tokenIndex138 := position, tokenIndex
												if !_rules[rulearraySep]() {
													goto l138
												}
												goto l139
											l138:
												position, tokenIndex = position138, tokenIndex138
											}
										l139:
											if !_rules[rulewsnl]() {
												goto l127
											}
											{
												position140, tokenIndex140 := position, tokenIndex
												if !_rules[rulecomment]() {
													goto l140
												}
												goto l141
											l140:
												position, tokenIndex = position140, tokenIndex140
											}
										l141:
											add(rulearrayValues, position129)
										}
										goto l128
									l127:
										position, tokenIndex = position127, tokenIndex127
									}
								l128:
									if !_rules[rulewsnl]() {
										goto l79
									}
									if buffer[position] != rune(']') {
										goto l79
									}
									position++
									add(rulearray, position125)
								}
								add(rulePegText, position124)
							}
							{
								add(ruleAction11, position)
							}
						case 'f', 't':
							{
								position143 := position
								{
									position144 := position
									{
										position145, tokenIndex145 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l146
										}
										position++
										if buffer[position] != rune('r') {
											goto l146
										}
										position++
										if buffer[position] != rune('u') {
											goto l146
										}
										position++
										if buffer[position] != rune('e') {
											goto l146
										}
										position++
										goto l145
									l146:
										position, tokenIndex = position145, tokenIndex145
										if buffer[position] != rune('f') {
											goto l79
										}
										position++
										if buffer[position] != rune('a') {
											goto l79
										}
										position++
										if buffer[position] != rune('l') {
											goto l79
										}
										position++
										if buffer[position] != rune('s') {
											goto l79
										}
										position++
										if buffer[position] != rune('e') {
											goto l79
										}
										position++
									}
								l145:
									add(ruleboolean, position144)
								}
								add(rulePegText, position143)
							}
							{
								add(ruleAction10, position)
							}
						case '"', '\'':
							{
								position148 := position
								{
									position149 := position
									{
										position150, tokenIndex150 := position, tokenIndex
										{
											position152 := position
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											{
												position153 := position
												{
													position154 := position
												l155:
													{
														position156, tokenIndex156 := position, tokenIndex
														{
															position157, tokenIndex157 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l157
															}
															position++
															if buffer[position] != rune('\'') {
																goto l157
															}
															position++
															if buffer[position] != rune('\'') {
																goto l157
															}
															position++
															goto l156
														l157:
															position, tokenIndex = position157, tokenIndex157
														}
														{
															position158, tokenIndex158 := position, tokenIndex
															{
																position160 := position
																{
																	position161, tokenIndex161 := position, tokenIndex
																	if buffer[position] != rune('\t') {
																		goto l162
																	}
																	position++
																	goto l161
																l162:
																	position, tokenIndex = position161, tokenIndex161
																	if c := buffer[position]; c < rune(' ') || c > rune('\U0010ffff') {
																		goto l159
																	}
																	position++
																}
															l161:
																add(rulemlLiteralChar, position160)
															}
															goto l158
														l159:
															position, tokenIndex = position158, tokenIndex158
															if !_rules[rulenewline]() {
																goto l156
															}
														}
													l158:
														goto l155
													l156:
														position, tokenIndex = position156, tokenIndex156
													}
													add(rulemlLiteralBody, position154)
												}
												add(rulePegText, position153)
											}
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											if buffer[position] != rune('\'') {
												goto l151
											}
											position++
											{
												add(ruleAction22, position)
											}
											add(rulemlLiteralString, position152)
										}
										goto l150
									l151:
										position, tokenIndex = position150, tokenIndex150
										{
											position165 := position
											if buffer[position] != rune('\'') {
												goto l164
											}
											position++
											{
												position166 := position
											l167:
												{
													position168, tokenIndex168 := position, tokenIndex
													{
														position169 := position
														{
															switch buffer[position] {
															case '\t':
																if buffer[position] != rune('\t') {
																	goto l168
																}
																position++
															case ' ', '!', '"', '#', '$', '%', '&':
																if c := buffer[position]; c < rune(' ') || c > rune('&') {
																	goto l168
																}
																position++
															default:
																if c := buffer[position]; c < rune('(') || c > rune('\U0010ffff') {
																	goto l168
																}
																position++
															}
														}

														add(ruleliteralChar, position169)
													}
													goto l167
												l168:
													position, tokenIndex = position168, tokenIndex168
												}
												add(rulePegText, position166)
											}
											if buffer[position] != rune('\'') {
												goto l164
											}
											position++
											{
												add(ruleAction21, position)
											}
											add(ruleliteralString, position165)
										}
										goto l150
									l164:
										position, tokenIndex = position150, tokenIndex150
										{
											position173 := position
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											{
												position174 := position
											l175:
												{
													position176, tokenIndex176 := position, tokenIndex
													{
														position177, tokenIndex177 := position, tokenIndex
														{
															position179, tokenIndex179 := position, tokenIndex
															if buffer[position] != rune('"') {
																goto l179
															}
															position++
															if buffer[position] != rune('"') {
																goto l179
															}
															position++
															if buffer[position] != rune('"') {
																goto l179
															}
															position++
															goto l178
														l179:
															position, tokenIndex = position179, tokenIndex179
														}
														if buffer[position] != rune('"') {
															goto l178
														}
														position++
														{
															add(ruleAction19, position)
														}
														goto l177
													l178:
														position, tokenIndex = position177, tokenIndex177
														{
															position182 := position
															{
																position183, tokenIndex183 := position, tokenIndex
																if !_rules[rulebasicChar]() {
																	goto l184
																}
																goto l183
															l184:
																position, tokenIndex = position183, tokenIndex183
																if !_rules[rulenewline]() {
																	goto l181
																}
															}
														l183:
															add(rulePegText, position182)
														}
														{
															add(ruleAction20, position)
														}
														goto l177
													l181:
														position, tokenIndex = position177, tokenIndex177
														if !_rules[ruleescape]() {
															goto l176
														}
														if !_rules[rulenewline]() {
															goto l176
														}
														if !_rules[rulewsnl]() {
															goto l176
														}
													}
												l177:
													goto l175
												l176:
													position, tokenIndex = position176, tokenIndex176
												}
												add(rulemlBasicBody, position174)
											}
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											if buffer[position] != rune('"') {
												goto l172
											}
											position++
											{
												add(ruleAction18, position)
											}
											add(rulemlBasicString, position173)
										}
										goto l150
									l172:
										position, tokenIndex = position150, tokenIndex150
										{
											position187 := position
											{
												position188 := position
												if buffer[position] != rune('"') {
													goto l79
												}
												position++
											l189:
												{
													position190, tokenIndex190 := position, tokenIndex
													if !_rules[rulebasicChar]() {
														goto l190
													}
													goto l189
												l190:
													position, tokenIndex = position190, tokenIndex190
												}
												if buffer[position] != rune('"') {
													goto l79
												}
												position++
												add(rulePegText, position188)
											}
											{
												add(ruleAction17, position)
											}
											add(rulebasicString, position187)
										}
									}
								l150:
									add(rulestring, position149)
								}
								add(rulePegText, position148)
							}
							{
								add(ruleAction9, position)
							}
						default:
							{
								position193 := position
								if !_rules[ruleinteger]() {
									goto l79
								}
								add(rulePegText, position193)
							}
							{
								add(ruleAction8, position)
							}
						}
					}

				}
			l81:
				add(ruleval, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 11 table <- <(stdTable / arrayTable)> */
		nil,
		/* 12 stdTable <- <('[' ws <tableKey> ws ']' Action12)> */
		nil,
		/* 13 arrayTable <- <('[' '[' ws <tableKey> ws (']' ']') Action13)> */
		nil,
		/* 14 inlineTable <- <('{' Action14 ws inlineTableKeyValues ws '}' Action15)> */
		nil,
		/* 15 inlineTableKeyValues <- <(keyval inlineTableValSep?)*> */
		nil,
		/* 16 tableKey <- <(tableKeyComp (tableKeySep tableKeyComp)*)> */
		func() bool {
			position200, tokenIndex200 := position, tokenIndex
			{
				position201 := position
				if !_rules[ruletableKeyComp]() {
					goto l200
				}
			l202:
				{
					position203, tokenIndex203 := position, tokenIndex
					{
						position204 := position
						if !_rules[rulews]() {
							goto l203
						}
						if buffer[position] != rune('.') {
							goto l203
						}
						position++
						if !_rules[rulews]() {
							goto l203
						}
						add(ruletableKeySep, position204)
					}
					if !_rules[ruletableKeyComp]() {
						goto l203
					}
					goto l202
				l203:
					position, tokenIndex = position203, tokenIndex203
				}
				add(ruletableKey, position201)
			}
			return true
		l200:
			position, tokenIndex = position200, tokenIndex200
			return false
		},
		/* 17 tableKeyComp <- <(key Action16)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				if !_rules[rulekey]() {
					goto l205
				}
				{
					add(ruleAction16, position)
				}
				add(ruletableKeyComp, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 18 tableKeySep <- <(ws '.' ws)> */
		nil,
		/* 19 inlineTableValSep <- <(ws ',' ws)> */
		nil,
		/* 20 escaped <- <(escape ((&('U') ('U' hexQuad hexQuad)) | (&('u') ('u' hexQuad)) | (&('\\') '\\') | (&('/') '/') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 21 escape <- <'\\'> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				if buffer[position] != rune('\\') {
					goto l211
				}
				position++
				add(ruleescape, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 22 hexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position213, tokenIndex213 := position, tokenIndex
			{
				position214 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l213
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l213
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l213
						}
						position++
					}
				}

				add(rulehexDigit, position214)
			}
			return true
		l213:
			position, tokenIndex = position213, tokenIndex213
			return false
		},
		/* 23 hexQuad <- <(hexDigit hexDigit hexDigit hexDigit)> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				if !_rules[rulehexDigit]() {
					goto l216
				}
				if !_rules[rulehexDigit]() {
					goto l216
				}
				if !_rules[rulehexDigit]() {
					goto l216
				}
				if !_rules[rulehexDigit]() {
					goto l216
				}
				add(rulehexQuad, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 24 string <- <(mlLiteralString / literalString / mlBasicString / basicString)> */
		nil,
		/* 25 basicString <- <(<('"' basicChar* '"')> Action17)> */
		nil,
		/* 26 basicChar <- <(basicUnescaped / escaped)> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222, tokenIndex222 := position, tokenIndex
					{
						position224 := position
						{
							switch buffer[position] {
							case ' ', '!':
								if c := buffer[position]; c < rune(' ') || c > rune('!') {
									goto l223
								}
								position++
							case '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[':
								if c := buffer[position]; c < rune('#') || c > rune('[') {
									goto l223
								}
								position++
							default:
								if c := buffer[position]; c < rune(']') || c > rune('\U0010ffff') {
									goto l223
								}
								position++
							}
						}

						add(rulebasicUnescaped, position224)
					}
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					{
						position226 := position
						if !_rules[ruleescape]() {
							goto l220
						}
						{
							switch buffer[position] {
							case 'U':
								if buffer[position] != rune('U') {
									goto l220
								}
								position++
								if !_rules[rulehexQuad]() {
									goto l220
								}
								if !_rules[rulehexQuad]() {
									goto l220
								}
							case 'u':
								if buffer[position] != rune('u') {
									goto l220
								}
								position++
								if !_rules[rulehexQuad]() {
									goto l220
								}
							case '\\':
								if buffer[position] != rune('\\') {
									goto l220
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l220
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l220
								}
								position++
							case 'r':
								if buffer[position] != rune('r') {
									goto l220
								}
								position++
							case 'f':
								if buffer[position] != rune('f') {
									goto l220
								}
								position++
							case 'n':
								if buffer[position] != rune('n') {
									goto l220
								}
								position++
							case 't':
								if buffer[position] != rune('t') {
									goto l220
								}
								position++
							default:
								if buffer[position] != rune('b') {
									goto l220
								}
								position++
							}
						}

						add(ruleescaped, position226)
					}
				}
			l222:
				add(rulebasicChar, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 27 basicUnescaped <- <((&(' ' | '!') [ -!]) | (&('#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[') [#-[]) | (&(']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' | '\u007f' | '\u0080' | '\u0081' | '\u0082' | '\u0083' | '\u0084' | '\u0085' | '\u0086' | '\u0087' | '\u0088' | '\u0089' | '\u008a' | '\u008b' | '\u008c' | '\u008d' | '\u008e' | '\u008f' | '\u0090' | '\u0091' | '\u0092' | '\u0093' | '\u0094' | '\u0095' | '\u0096' | '\u0097' | '\u0098' | '\u0099' | '\u009a' | '\u009b' | '\u009c' | '\u009d' | '\u009e' | '\u009f' | '\u00a0' | '¡' | '¢' | '£' | '¤' | '¥' | '¦' | '§' | '¨' | '©' | 'ª' | '«' | '¬' | '\u00ad' | '®' | '¯' | '°' | '±' | '²' | '³' | '´' | 'µ' | '¶' | '·' | '¸' | '¹' | 'º' | '»' | '¼' | '½' | '¾' | '¿' | 'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó' | 'Ô' | 'Õ' | 'Ö' | '×' | 'Ø' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Þ' | 'ß' | 'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó' | 'ô' | 'õ' | 'ö' | '÷' | 'ø' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'þ' | 'ÿ') []-\U0010ffff]))> */
		nil,
		/* 28 mlBasicString <- <('"' '"' '"' mlBasicBody ('"' '"' '"') Action18)> */
		nil,
		/* 29 mlBasicBody <- <((!('"' '"' '"') '"' Action19) / (<(basicChar / newline)> Action20) / (escape newline wsnl))*> */
		nil,
		/* 30 literalString <- <('\'' <literalChar*> '\'' Action21)> */
		nil,
		/* 31 literalChar <- <((&('\t') '\t') | (&(' ' | '!' | '"' | '#' | '$' | '%' | '&') [ -&]) | (&('(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\\' | ']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' | '\u007f' | '\u0080' | '\u0081' | '\u0082' | '\u0083' | '\u0084' | '\u0085' | '\u0086' | '\u0087' | '\u0088' | '\u0089' | '\u008a' | '\u008b' | '\u008c' | '\u008d' | '\u008e' | '\u008f' | '\u0090' | '\u0091' | '\u0092' | '\u0093' | '\u0094' | '\u0095' | '\u0096' | '\u0097' | '\u0098' | '\u0099' | '\u009a' | '\u009b' | '\u009c' | '\u009d' | '\u009e' | '\u009f' | '\u00a0' | '¡' | '¢' | '£' | '¤' | '¥' | '¦' | '§' | '¨' | '©' | 'ª' | '«' | '¬' | '\u00ad' | '®' | '¯' | '°' | '±' | '²' | '³' | '´' | 'µ' | '¶' | '·' | '¸' | '¹' | 'º' | '»' | '¼' | '½' | '¾' | '¿' | 'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó' | 'Ô' | 'Õ' | 'Ö' | '×' | 'Ø' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Þ' | 'ß' | 'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó' | 'ô' | 'õ' | 'ö' | '÷' | 'ø' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'þ' | 'ÿ') [(-\U0010ffff]))> */
		nil,
		/* 32 mlLiteralString <- <('\'' '\'' '\'' <mlLiteralBody> ('\'' '\'' '\'') Action22)> */
		nil,
		/* 33 mlLiteralBody <- <(!('\'' '\'' '\'') (mlLiteralChar / newline))*> */
		nil,
		/* 34 mlLiteralChar <- <('\t' / [ -\U0010ffff])> */
		nil,
		/* 35 boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		nil,
		/* 36 dateFullYear <- <digitQuad> */
		nil,
		/* 37 dateMonth <- <digitDual> */
		nil,
		/* 38 dateMDay <- <digitDual> */
		nil,
		/* 39 timeHour <- <digitDual> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				if !_rules[ruledigitDual]() {
					goto l240
				}
				add(ruletimeHour, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 40 timeMinute <- <digitDual> */
		func() bool {
			position242, tokenIndex242 := position, tokenIndex
			{
				position243 := position
				if !_rules[ruledigitDual]() {
					goto l242
				}
				add(ruletimeMinute, position243)
			}
			return true
		l242:
			position, tokenIndex = position242, tokenIndex242
			return false
		},
		/* 41 timeSecond <- <digitDual> */
		nil,
		/* 42 timeSecfrac <- <('.' digit+)> */
		nil,
		/* 43 timeNumoffset <- <(('-' / '+') timeHour ':' timeMinute)> */
		nil,
		/* 44 timeOffset <- <('Z' / timeNumoffset)> */
		nil,
		/* 45 partialTime <- <(timeHour ':' timeMinute ':' timeSecond timeSecfrac?)> */
		func() bool {
			position248, tokenIndex248 := position, tokenIndex
			{
				position249 := position
				if !_rules[ruletimeHour]() {
					goto l248
				}
				if buffer[position] != rune(':') {
					goto l248
				}
				position++
				if !_rules[ruletimeMinute]() {
					goto l248
				}
				if buffer[position] != rune(':') {
					goto l248
				}
				position++
				{
					position250 := position
					if !_rules[ruledigitDual]() {
						goto l248
					}
					add(ruletimeSecond, position250)
				}
				{
					position251, tokenIndex251 := position, tokenIndex
					{
						position253 := position
						if buffer[position] != rune('.') {
							goto l251
						}
						position++
						if !_rules[ruledigit]() {
							goto l251
						}
					l254:
						{
							position255, tokenIndex255 := position, tokenIndex
							if !_rules[ruledigit]() {
								goto l255
							}
							goto l254
						l255:
							position, tokenIndex = position255, tokenIndex255
						}
						add(ruletimeSecfrac, position253)
					}
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				add(rulepartialTime, position249)
			}
			return true
		l248:
			position, tokenIndex = position248, tokenIndex248
			return false
		},
		/* 46 fullDate <- <(dateFullYear '-' dateMonth '-' dateMDay)> */
		nil,
		/* 47 fullTime <- <(partialTime timeOffset?)> */
		nil,
		/* 48 datetime <- <((fullDate ('T' fullTime)?) / partialTime)> */
		nil,
		/* 49 integer <- <(('-' / '+')? int)> */
		func() bool {
			position259, tokenIndex259 := position, tokenIndex
			{
				position260 := position
				{
					position261, tokenIndex261 := position, tokenIndex
					{
						position263, tokenIndex263 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l264
						}
						position++
						goto l263
					l264:
						position, tokenIndex = position263, tokenIndex263
						if buffer[position] != rune('+') {
							goto l261
						}
						position++
					}
				l263:
					goto l262
				l261:
					position, tokenIndex = position261, tokenIndex261
				}
			l262:
				{
					position265 := position
					{
						position266, tokenIndex266 := position, tokenIndex
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l267
						}
						position++
						{
							position270, tokenIndex270 := position, tokenIndex
							if !_rules[ruledigit]() {
								goto l271
							}
							goto l270
						l271:
							position, tokenIndex = position270, tokenIndex270
							if buffer[position] != rune('_') {
								goto l267
							}
							position++
							if !_rules[ruledigit]() {
								goto l267
							}
						}
					l270:
					l268:
						{
							position269, tokenIndex269 := position, tokenIndex
							{
								position272, tokenIndex272 := position, tokenIndex
								if !_rules[ruledigit]() {
									goto l273
								}
								goto l272
							l273:
								position, tokenIndex = position272, tokenIndex272
								if buffer[position] != rune('_') {
									goto l269
								}
								position++
								if !_rules[ruledigit]() {
									goto l269
								}
							}
						l272:
							goto l268
						l269:
							position, tokenIndex = position269, tokenIndex269
						}
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if !_rules[ruledigit]() {
							goto l259
						}
					}
				l266:
					add(ruleint, position265)
				}
				add(ruleinteger, position260)
			}
			return true
		l259:
			position, tokenIndex = position259, tokenIndex259
			return false
		},
		/* 50 int <- <(([1-9] (digit / ('_' digit))+) / digit)> */
		nil,
		/* 51 float <- <(integer ((frac exp?) / (frac? exp)))> */
		nil,
		/* 52 frac <- <('.' digit (digit / ('_' digit))*)> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				if buffer[position] != rune('.') {
					goto l276
				}
				position++
				if !_rules[ruledigit]() {
					goto l276
				}
			l278:
				{
					position279, tokenIndex279 := position, tokenIndex
					{
						position280, tokenIndex280 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l281
						}
						goto l280
					l281:
						position, tokenIndex = position280, tokenIndex280
						if buffer[position] != rune('_') {
							goto l279
						}
						position++
						if !_rules[ruledigit]() {
							goto l279
						}
					}
				l280:
					goto l278
				l279:
					position, tokenIndex = position279, tokenIndex279
				}
				add(rulefrac, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 53 exp <- <(('e' / 'E') ('-' / '+')? digit (digit / ('_' digit))*)> */
		func() bool {
			position282, tokenIndex282 := position, tokenIndex
			{
				position283 := position
				{
					position284, tokenIndex284 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l285
					}
					position++
					goto l284
				l285:
					position, tokenIndex = position284, tokenIndex284
					if buffer[position] != rune('E') {
						goto l282
					}
					position++
				}
			l284:
				{
					position286, tokenIndex286 := position, tokenIndex
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('+') {
							goto l286
						}
						position++
					}
				l288:
					goto l287
				l286:
					position, tokenIndex = position286, tokenIndex286
				}
			l287:
				if !_rules[ruledigit]() {
					goto l282
				}
			l290:
				{
					position291, tokenIndex291 := position, tokenIndex
					{
						position292, tokenIndex292 := position, tokenIndex
						if !_rules[ruledigit]() {
							goto l293
						}
						goto l292
					l293:
						position, tokenIndex = position292, tokenIndex292
						if buffer[position] != rune('_') {
							goto l291
						}
						position++
						if !_rules[ruledigit]() {
							goto l291
						}
					}
				l292:
					goto l290
				l291:
					position, tokenIndex = position291, tokenIndex291
				}
				add(ruleexp, position283)
			}
			return true
		l282:
			position, tokenIndex = position282, tokenIndex282
			return false
		},
		/* 54 digit <- <[0-9]> */
		func() bool {
			position294, tokenIndex294 := position, tokenIndex
			{
				position295 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l294
				}
				position++
				add(ruledigit, position295)
			}
			return true
		l294:
			position, tokenIndex = position294, tokenIndex294
			return false
		},
		/* 55 digitDual <- <(digit digit)> */
		func() bool {
			position296, tokenIndex296 := position, tokenIndex
			{
				position297 := position
				if !_rules[ruledigit]() {
					goto l296
				}
				if !_rules[ruledigit]() {
					goto l296
				}
				add(ruledigitDual, position297)
			}
			return true
		l296:
			position, tokenIndex = position296, tokenIndex296
			return false
		},
		/* 56 digitQuad <- <(digitDual digitDual)> */
		nil,
		/* 57 array <- <('[' Action23 wsnl arrayValues? wsnl ']')> */
		nil,
		/* 58 arrayValues <- <(val Action24 (wsnl comment? wsnl arraySep wsnl comment? wsnl val Action25)* wsnl arraySep? wsnl comment?)> */
		nil,
		/* 59 arraySep <- <','> */
		func() bool {
			position301, tokenIndex301 := position, tokenIndex
			{
				position302 := position
				if buffer[position] != rune(',') {
					goto l301
				}
				position++
				add(rulearraySep, position302)
			}
			return true
		l301:
			position, tokenIndex = position301, tokenIndex301
			return false
		},
		/* 61 Action0 <- <{ _ = buffer }> */
		nil,
		nil,
		/* 63 Action1 <- <{ p.SetTableString(begin, end) }> */
		nil,
		/* 64 Action2 <- <{ p.Newline() }> */
		nil,
		/* 65 Action3 <- <{ p.AddKeyValue() }> */
		nil,
		/* 66 Action4 <- <{ p.SetKey(p.buffer, begin, end) }> */
		nil,
		/* 67 Action5 <- <{ p.SetKey(p.buffer, begin, end) }> */
		nil,
		/* 68 Action6 <- <{ p.SetTime(begin, end) }> */
		nil,
		/* 69 Action7 <- <{ p.SetFloat64(begin, end) }> */
		nil,
		/* 70 Action8 <- <{ p.SetInt64(begin, end) }> */
		nil,
		/* 71 Action9 <- <{ p.SetString(begin, end) }> */
		nil,
		/* 72 Action10 <- <{ p.SetBool(begin, end) }> */
		nil,
		/* 73 Action11 <- <{ p.SetArray(begin, end) }> */
		nil,
		/* 74 Action12 <- <{ p.SetTable(p.buffer, begin, end) }> */
		nil,
		/* 75 Action13 <- <{ p.SetArrayTable(p.buffer, begin, end) }> */
		nil,
		/* 76 Action14 <- <{ p.StartInlineTable() }> */
		nil,
		/* 77 Action15 <- <{ p.EndInlineTable() }> */
		nil,
		/* 78 Action16 <- <{ p.AddTableKey() }> */
		nil,
		/* 79 Action17 <- <{ p.SetBasicString(p.buffer, begin, end) }> */
		nil,
		/* 80 Action18 <- <{ p.SetMultilineBasicString() }> */
		nil,
		/* 81 Action19 <- <{ p.AddMultilineBasicQuote() }> */
		nil,
		/* 82 Action20 <- <{ p.AddMultilineBasicBody(p.buffer, begin, end) }> */
		nil,
		/* 83 Action21 <- <{ p.SetLiteralString(p.buffer, begin, end) }> */
		nil,
		/* 84 Action22 <- <{ p.SetMultilineLiteralString(p.buffer, begin, end) }> */
		nil,
		/* 85 Action23 <- <{ p.StartArray() }> */
		nil,
		/* 86 Action24 <- <{ p.AddArrayVal() }> */
		nil,
		/* 87 Action25 <- <{ p.AddArrayVal() }> */
		nil,
	}
	p.rules = _rules
	return nil
}
