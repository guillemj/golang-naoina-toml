package toml

// Code generated by peg -switch -inline parse.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleTOML
	ruleExpression
	rulenewline
	rulenewlineRequired
	rulews
	rulewsnl
	rulecomment
	ruleval
	ruletable
	rulestdTable
	rulearrayTable
	ruleinlineTable
	ruleinlineTableKeyValues
	rulekeyval
	rulekey
	rulebareKey
	rulequotedKey
	ruletableKey
	ruletableKeyComp
	ruletableKeySep
	ruleinlineTableValSep
	ruleboolean
	ruleinteger
	ruledecimalInt
	ruledecimalDigit
	rulehexInt
	rulehexDigit
	ruleoctalInt
	ruleoctalDigit
	rulebinaryInt
	rulebinaryDigit
	rulefloat
	rulefloatDigits
	rulefloatFrac
	rulefloatExp
	ruleescaped
	ruleescape
	rulehexQuad
	rulestring
	rulebasicString
	rulebasicChar
	rulebasicUnescaped
	rulemlBasicString
	rulemlBasicBody
	ruleliteralString
	ruleliteralChar
	rulemlLiteralString
	rulemlLiteralBody
	rulemlLiteralChar
	ruledatetime
	rulepartialTime
	rulefullDate
	rulefullTime
	ruledateFullYear
	ruledateMonth
	ruledateMDay
	ruletimeHour
	ruletimeMinute
	ruletimeSecond
	ruletimeSecfrac
	ruletimeNumoffset
	ruletimeOffset
	ruledigitDual
	ruledigitQuad
	rulearray
	rulearrayValues
	rulearraySep
	ruleAction0
	rulePegText
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
)

var rul3s = [...]string{
	"Unknown",
	"TOML",
	"Expression",
	"newline",
	"newlineRequired",
	"ws",
	"wsnl",
	"comment",
	"val",
	"table",
	"stdTable",
	"arrayTable",
	"inlineTable",
	"inlineTableKeyValues",
	"keyval",
	"key",
	"bareKey",
	"quotedKey",
	"tableKey",
	"tableKeyComp",
	"tableKeySep",
	"inlineTableValSep",
	"boolean",
	"integer",
	"decimalInt",
	"decimalDigit",
	"hexInt",
	"hexDigit",
	"octalInt",
	"octalDigit",
	"binaryInt",
	"binaryDigit",
	"float",
	"floatDigits",
	"floatFrac",
	"floatExp",
	"escaped",
	"escape",
	"hexQuad",
	"string",
	"basicString",
	"basicChar",
	"basicUnescaped",
	"mlBasicString",
	"mlBasicBody",
	"literalString",
	"literalChar",
	"mlLiteralString",
	"mlLiteralBody",
	"mlLiteralChar",
	"datetime",
	"partialTime",
	"fullDate",
	"fullTime",
	"dateFullYear",
	"dateMonth",
	"dateMDay",
	"timeHour",
	"timeMinute",
	"timeSecond",
	"timeSecfrac",
	"timeNumoffset",
	"timeOffset",
	"digitDual",
	"digitQuad",
	"array",
	"arrayValues",
	"arraySep",
	"Action0",
	"PegText",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type tomlParser struct {
	toml

	Buffer string
	buffer []rune
	rules  [97]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *tomlParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *tomlParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *tomlParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *tomlParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *tomlParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *tomlParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *tomlParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			_ = buffer
		case ruleAction1:
			p.SetTableSource(begin, end)
		case ruleAction2:
			p.Newline()
		case ruleAction3:
			p.Error(errNewlineRequired)
		case ruleAction4:
			p.SetTime(begin, end)
		case ruleAction5:
			p.SetFloat(begin, end)
		case ruleAction6:
			p.SetInteger(begin, end)
		case ruleAction7:
			p.SetString(begin, end)
		case ruleAction8:
			p.SetBool(begin, end)
		case ruleAction9:
			p.SetArray(begin, end)
		case ruleAction10:
			p.SetInlineTableSource(begin, end)
		case ruleAction11:
			p.SetTable(p.buffer, begin, end)
		case ruleAction12:
			p.SetArrayTable(p.buffer, begin, end)
		case ruleAction13:
			p.StartInlineTable()
		case ruleAction14:
			p.EndInlineTable()
		case ruleAction15:
			p.AddKeyValue()
		case ruleAction16:
			p.SetKey(p.buffer, begin, end)
		case ruleAction17:
			p.SetKey(p.buffer, begin, end)
		case ruleAction18:
			p.AddTableKey()
		case ruleAction19:
			p.SetBasicString(p.buffer, begin, end)
		case ruleAction20:
			p.SetMultilineBasicString()
		case ruleAction21:
			p.AddMultilineBasicQuote()
		case ruleAction22:
			p.AddMultilineBasicBody(p.buffer, begin, end)
		case ruleAction23:
			p.SetLiteralString(p.buffer, begin, end)
		case ruleAction24:
			p.SetMultilineLiteralString(p.buffer, begin, end)
		case ruleAction25:
			p.StartArray()
		case ruleAction26:
			p.AddArrayVal()
		case ruleAction27:
			p.AddArrayVal()

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*tomlParser) error {
	return func(p *tomlParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*tomlParser) error {
	return func(p *tomlParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *tomlParser) Init(options ...func(*tomlParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 TOML <- <(Expression (newline Expression)* newline* !. Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[ruleExpression]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l3
					}
					if !_rules[ruleExpression]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
			l4:
				{
					position5, tokenIndex5 := position, tokenIndex
					if !_rules[rulenewline]() {
						goto l5
					}
					goto l4
				l5:
					position, tokenIndex = position5, tokenIndex5
				}
				{
					position6, tokenIndex6 := position, tokenIndex
					if !matchDot() {
						goto l6
					}
					goto l0
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				{
					add(ruleAction0, position)
				}
				add(ruleTOML, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 Expression <- <((<(ws table ws comment? (ws newlineRequired wsnl keyval ws comment?)*)> Action1) / (ws keyval ws comment?) / (ws comment?) / ws)> */
		func() bool {
			position8, tokenIndex8 := position, tokenIndex
			{
				position9 := position
				{
					position10, tokenIndex10 := position, tokenIndex
					{
						position12 := position
						if !_rules[rulews]() {
							goto l11
						}
						{
							position13 := position
							{
								position14, tokenIndex14 := position, tokenIndex
								{
									position16 := position
									if buffer[position] != rune('[') {
										goto l15
									}
									position++
									if !_rules[rulews]() {
										goto l15
									}
									{
										position17 := position
										if !_rules[ruletableKey]() {
											goto l15
										}
										add(rulePegText, position17)
									}
									if !_rules[rulews]() {
										goto l15
									}
									if buffer[position] != rune(']') {
										goto l15
									}
									position++
									{
										add(ruleAction11, position)
									}
									add(rulestdTable, position16)
								}
								goto l14
							l15:
								position, tokenIndex = position14, tokenIndex14
								{
									position19 := position
									if buffer[position] != rune('[') {
										goto l11
									}
									position++
									if buffer[position] != rune('[') {
										goto l11
									}
									position++
									if !_rules[rulews]() {
										goto l11
									}
									{
										position20 := position
										if !_rules[ruletableKey]() {
											goto l11
										}
										add(rulePegText, position20)
									}
									if !_rules[rulews]() {
										goto l11
									}
									if buffer[position] != rune(']') {
										goto l11
									}
									position++
									if buffer[position] != rune(']') {
										goto l11
									}
									position++
									{
										add(ruleAction12, position)
									}
									add(rulearrayTable, position19)
								}
							}
						l14:
							add(ruletable, position13)
						}
						if !_rules[rulews]() {
							goto l11
						}
						{
							position22, tokenIndex22 := position, tokenIndex
							if !_rules[rulecomment]() {
								goto l22
							}
							goto l23
						l22:
							position, tokenIndex = position22, tokenIndex22
						}
					l23:
					l24:
						{
							position25, tokenIndex25 := position, tokenIndex
							if !_rules[rulews]() {
								goto l25
							}
							{
								position26 := position
								{
									position27, tokenIndex27 := position, tokenIndex
									{
										position29, tokenIndex29 := position, tokenIndex
										if !_rules[rulenewline]() {
											goto l29
										}
										goto l28
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
									{
										add(ruleAction3, position)
									}
									goto l27
								l28:
									position, tokenIndex = position27, tokenIndex27
									if !_rules[rulenewline]() {
										goto l25
									}
								}
							l27:
								add(rulenewlineRequired, position26)
							}
							if !_rules[rulewsnl]() {
								goto l25
							}
							if !_rules[rulekeyval]() {
								goto l25
							}
							if !_rules[rulews]() {
								goto l25
							}
							{
								position31, tokenIndex31 := position, tokenIndex
								if !_rules[rulecomment]() {
									goto l31
								}
								goto l32
							l31:
								position, tokenIndex = position31, tokenIndex31
							}
						l32:
							goto l24
						l25:
							position, tokenIndex = position25, tokenIndex25
						}
						add(rulePegText, position12)
					}
					{
						add(ruleAction1, position)
					}
					goto l10
				l11:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l34
					}
					if !_rules[rulekeyval]() {
						goto l34
					}
					if !_rules[rulews]() {
						goto l34
					}
					{
						position35, tokenIndex35 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l35
						}
						goto l36
					l35:
						position, tokenIndex = position35, tokenIndex35
					}
				l36:
					goto l10
				l34:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l37
					}
					{
						position38, tokenIndex38 := position, tokenIndex
						if !_rules[rulecomment]() {
							goto l38
						}
						goto l39
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
				l39:
					goto l10
				l37:
					position, tokenIndex = position10, tokenIndex10
					if !_rules[rulews]() {
						goto l8
					}
				}
			l10:
				add(ruleExpression, position9)
			}
			return true
		l8:
			position, tokenIndex = position8, tokenIndex8
			return false
		},
		/* 2 newline <- <((('\r' '\n') / '\n') Action2)> */
		func() bool {
			position40, tokenIndex40 := position, tokenIndex
			{
				position41 := position
				{
					position42, tokenIndex42 := position, tokenIndex
					if buffer[position] != rune('\r') {
						goto l43
					}
					position++
					if buffer[position] != rune('\n') {
						goto l43
					}
					position++
					goto l42
				l43:
					position, tokenIndex = position42, tokenIndex42
					if buffer[position] != rune('\n') {
						goto l40
					}
					position++
				}
			l42:
				{
					add(ruleAction2, position)
				}
				add(rulenewline, position41)
			}
			return true
		l40:
			position, tokenIndex = position40, tokenIndex40
			return false
		},
		/* 3 newlineRequired <- <((!newline Action3) / newline)> */
		nil,
		/* 4 ws <- <(' ' / '\t')*> */
		func() bool {
			{
				position47 := position
			l48:
				{
					position49, tokenIndex49 := position, tokenIndex
					{
						position50, tokenIndex50 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l51
						}
						position++
						goto l50
					l51:
						position, tokenIndex = position50, tokenIndex50
						if buffer[position] != rune('\t') {
							goto l49
						}
						position++
					}
				l50:
					goto l48
				l49:
					position, tokenIndex = position49, tokenIndex49
				}
				add(rulews, position47)
			}
			return true
		},
		/* 5 wsnl <- <((&('\t') '\t') | (&(' ') ' ') | (&('\n' | '\r') newline))*> */
		func() bool {
			{
				position53 := position
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						switch buffer[position] {
						case '\t':
							if buffer[position] != rune('\t') {
								goto l55
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l55
							}
							position++
						default:
							if !_rules[rulenewline]() {
								goto l55
							}
						}
					}

					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				add(rulewsnl, position53)
			}
			return true
		},
		/* 6 comment <- <('#' ('\t' / [ -\U0010ffff])*)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if buffer[position] != rune('#') {
					goto l57
				}
				position++
			l59:
				{
					position60, tokenIndex60 := position, tokenIndex
					{
						position61, tokenIndex61 := position, tokenIndex
						if buffer[position] != rune('\t') {
							goto l62
						}
						position++
						goto l61
					l62:
						position, tokenIndex = position61, tokenIndex61
						if c := buffer[position]; c < rune(' ') || c > rune('\U0010ffff') {
							goto l60
						}
						position++
					}
				l61:
					goto l59
				l60:
					position, tokenIndex = position60, tokenIndex60
				}
				add(rulecomment, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 7 val <- <((<datetime> Action4) / (<float> Action5) / ((&('{') (<inlineTable> Action10)) | (&('[') (<array> Action9)) | (&('f' | 't') (<boolean> Action8)) | (&('"' | '\'') (<string> Action7)) | (&('+' | '-' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') (<integer> Action6))))> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				{
					position65, tokenIndex65 := position, tokenIndex
					{
						position67 := position
						{
							position68 := position
							{
								position69, tokenIndex69 := position, tokenIndex
								{
									position71 := position
									{
										position72 := position
										{
											position73 := position
											if !_rules[ruledigitDual]() {
												goto l70
											}
											if !_rules[ruledigitDual]() {
												goto l70
											}
											add(ruledigitQuad, position73)
										}
										add(ruledateFullYear, position72)
									}
									if buffer[position] != rune('-') {
										goto l70
									}
									position++
									{
										position74 := position
										if !_rules[ruledigitDual]() {
											goto l70
										}
										add(ruledateMonth, position74)
									}
									if buffer[position] != rune('-') {
										goto l70
									}
									position++
									{
										position75 := position
										if !_rules[ruledigitDual]() {
											goto l70
										}
										add(ruledateMDay, position75)
									}
									add(rulefullDate, position71)
								}
								{
									position76, tokenIndex76 := position, tokenIndex
									{
										switch buffer[position] {
										case ' ':
											if buffer[position] != rune(' ') {
												goto l76
											}
											position++
										case 't':
											if buffer[position] != rune('t') {
												goto l76
											}
											position++
										default:
											if buffer[position] != rune('T') {
												goto l76
											}
											position++
										}
									}

									{
										position79 := position
										if !_rules[rulepartialTime]() {
											goto l76
										}
										{
											position80, tokenIndex80 := position, tokenIndex
											{
												position82 := position
												{
													switch buffer[position] {
													case 'z':
														if buffer[position] != rune('z') {
															goto l80
														}
														position++
													case 'Z':
														if buffer[position] != rune('Z') {
															goto l80
														}
														position++
													default:
														{
															position84 := position
															{
																position85, tokenIndex85 := position, tokenIndex
																if buffer[position] != rune('-') {
																	goto l86
																}
																position++
																goto l85
															l86:
																position, tokenIndex = position85, tokenIndex85
																if buffer[position] != rune('+') {
																	goto l80
																}
																position++
															}
														l85:
															if !_rules[ruletimeHour]() {
																goto l80
															}
															if buffer[position] != rune(':') {
																goto l80
															}
															position++
															if !_rules[ruletimeMinute]() {
																goto l80
															}
															add(ruletimeNumoffset, position84)
														}
													}
												}

												add(ruletimeOffset, position82)
											}
											goto l81
										l80:
											position, tokenIndex = position80, tokenIndex80
										}
									l81:
										add(rulefullTime, position79)
									}
									goto l77
								l76:
									position, tokenIndex = position76, tokenIndex76
								}
							l77:
								goto l69
							l70:
								position, tokenIndex = position69, tokenIndex69
								if !_rules[rulepartialTime]() {
									goto l66
								}
							}
						l69:
							add(ruledatetime, position68)
						}
						add(rulePegText, position67)
					}
					{
						add(ruleAction4, position)
					}
					goto l65
				l66:
					position, tokenIndex = position65, tokenIndex65
					{
						position89 := position
						{
							position90 := position
							{
								position91, tokenIndex91 := position, tokenIndex
								{
									position93, tokenIndex93 := position, tokenIndex
									if buffer[position] != rune('+') {
										goto l94
									}
									position++
									goto l93
								l94:
									position, tokenIndex = position93, tokenIndex93
									if buffer[position] != rune('-') {
										goto l91
									}
									position++
								}
							l93:
								goto l92
							l91:
								position, tokenIndex = position91, tokenIndex91
							}
						l92:
							{
								switch buffer[position] {
								case 'i':
									if buffer[position] != rune('i') {
										goto l88
									}
									position++
									if buffer[position] != rune('n') {
										goto l88
									}
									position++
									if buffer[position] != rune('f') {
										goto l88
									}
									position++
								case 'n':
									if buffer[position] != rune('n') {
										goto l88
									}
									position++
									if buffer[position] != rune('a') {
										goto l88
									}
									position++
									if buffer[position] != rune('n') {
										goto l88
									}
									position++
								default:
									{
										position96 := position
										if !_rules[ruledecimalInt]() {
											goto l88
										}
										{
											position97, tokenIndex97 := position, tokenIndex
											if !_rules[rulefloatFrac]() {
												goto l98
											}
											{
												position99, tokenIndex99 := position, tokenIndex
												if !_rules[rulefloatExp]() {
													goto l99
												}
												goto l100
											l99:
												position, tokenIndex = position99, tokenIndex99
											}
										l100:
											goto l97
										l98:
											position, tokenIndex = position97, tokenIndex97
											{
												position101, tokenIndex101 := position, tokenIndex
												if !_rules[rulefloatFrac]() {
													goto l101
												}
												goto l102
											l101:
												position, tokenIndex = position101, tokenIndex101
											}
										l102:
											if !_rules[rulefloatExp]() {
												goto l88
											}
										}
									l97:
										add(rulefloatDigits, position96)
									}
								}
							}

							add(rulefloat, position90)
						}
						add(rulePegText, position89)
					}
					{
						add(ruleAction5, position)
					}
					goto l65
				l88:
					position, tokenIndex = position65, tokenIndex65
					{
						switch buffer[position] {
						case '{':
							{
								position105 := position
								{
									position106 := position
									if buffer[position] != rune('{') {
										goto l63
									}
									position++
									{
										add(ruleAction13, position)
									}
									if !_rules[rulews]() {
										goto l63
									}
									{
										position108 := position
									l109:
										{
											position110, tokenIndex110 := position, tokenIndex
											if !_rules[rulekeyval]() {
												goto l110
											}
											{
												position111, tokenIndex111 := position, tokenIndex
												{
													position113 := position
													if !_rules[rulews]() {
														goto l111
													}
													if buffer[position] != rune(',') {
														goto l111
													}
													position++
													if !_rules[rulews]() {
														goto l111
													}
													add(ruleinlineTableValSep, position113)
												}
												goto l112
											l111:
												position, tokenIndex = position111, tokenIndex111
											}
										l112:
											goto l109
										l110:
											position, tokenIndex = position110, tokenIndex110
										}
										add(ruleinlineTableKeyValues, position108)
									}
									if !_rules[rulews]() {
										goto l63
									}
									if buffer[position] != rune('}') {
										goto l63
									}
									position++
									{
										add(ruleAction14, position)
									}
									add(ruleinlineTable, position106)
								}
								add(rulePegText, position105)
							}
							{
								add(ruleAction10, position)
							}
						case '[':
							{
								position116 := position
								{
									position117 := position
									if buffer[position] != rune('[') {
										goto l63
									}
									position++
									{
										add(ruleAction25, position)
									}
									if !_rules[rulewsnl]() {
										goto l63
									}
									{
										position119, tokenIndex119 := position, tokenIndex
										{
											position121 := position
										l122:
											{
												position123, tokenIndex123 := position, tokenIndex
												if !_rules[rulewsnl]() {
													goto l123
												}
												if !_rules[rulecomment]() {
													goto l123
												}
												goto l122
											l123:
												position, tokenIndex = position123, tokenIndex123
											}
											if !_rules[rulewsnl]() {
												goto l119
											}
											if !_rules[ruleval]() {
												goto l119
											}
											{
												add(ruleAction26, position)
											}
										l125:
											{
												position126, tokenIndex126 := position, tokenIndex
											l127:
												{
													position128, tokenIndex128 := position, tokenIndex
													if !_rules[rulewsnl]() {
														goto l128
													}
													if !_rules[rulecomment]() {
														goto l128
													}
													goto l127
												l128:
													position, tokenIndex = position128, tokenIndex128
												}
												if !_rules[rulewsnl]() {
													goto l126
												}
												if !_rules[rulearraySep]() {
													goto l126
												}
											l129:
												{
													position130, tokenIndex130 := position, tokenIndex
													if !_rules[rulewsnl]() {
														goto l130
													}
													if !_rules[rulecomment]() {
														goto l130
													}
													goto l129
												l130:
													position, tokenIndex = position130, tokenIndex130
												}
												if !_rules[rulewsnl]() {
													goto l126
												}
												if !_rules[ruleval]() {
													goto l126
												}
												{
													add(ruleAction27, position)
												}
												goto l125
											l126:
												position, tokenIndex = position126, tokenIndex126
											}
										l132:
											{
												position133, tokenIndex133 := position, tokenIndex
												if !_rules[rulewsnl]() {
													goto l133
												}
												if !_rules[rulecomment]() {
													goto l133
												}
												goto l132
											l133:
												position, tokenIndex = position133, tokenIndex133
											}
											if !_rules[rulewsnl]() {
												goto l119
											}
											{
												position134, tokenIndex134 := position, tokenIndex
												if !_rules[rulearraySep]() {
													goto l134
												}
												goto l135
											l134:
												position, tokenIndex = position134, tokenIndex134
											}
										l135:
										l136:
											{
												position137, tokenIndex137 := position, tokenIndex
												if !_rules[rulewsnl]() {
													goto l137
												}
												if !_rules[rulecomment]() {
													goto l137
												}
												goto l136
											l137:
												position, tokenIndex = position137, tokenIndex137
											}
											add(rulearrayValues, position121)
										}
										goto l120
									l119:
										position, tokenIndex = position119, tokenIndex119
									}
								l120:
									if !_rules[rulewsnl]() {
										goto l63
									}
									if buffer[position] != rune(']') {
										goto l63
									}
									position++
									add(rulearray, position117)
								}
								add(rulePegText, position116)
							}
							{
								add(ruleAction9, position)
							}
						case 'f', 't':
							{
								position139 := position
								{
									position140 := position
									{
										position141, tokenIndex141 := position, tokenIndex
										if buffer[position] != rune('t') {
											goto l142
										}
										position++
										if buffer[position] != rune('r') {
											goto l142
										}
										position++
										if buffer[position] != rune('u') {
											goto l142
										}
										position++
										if buffer[position] != rune('e') {
											goto l142
										}
										position++
										goto l141
									l142:
										position, tokenIndex = position141, tokenIndex141
										if buffer[position] != rune('f') {
											goto l63
										}
										position++
										if buffer[position] != rune('a') {
											goto l63
										}
										position++
										if buffer[position] != rune('l') {
											goto l63
										}
										position++
										if buffer[position] != rune('s') {
											goto l63
										}
										position++
										if buffer[position] != rune('e') {
											goto l63
										}
										position++
									}
								l141:
									add(ruleboolean, position140)
								}
								add(rulePegText, position139)
							}
							{
								add(ruleAction8, position)
							}
						case '"', '\'':
							{
								position144 := position
								{
									position145 := position
									{
										position146, tokenIndex146 := position, tokenIndex
										{
											position148 := position
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											{
												position149 := position
												{
													position150 := position
												l151:
													{
														position152, tokenIndex152 := position, tokenIndex
														{
															position153, tokenIndex153 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l153
															}
															position++
															if buffer[position] != rune('\'') {
																goto l153
															}
															position++
															if buffer[position] != rune('\'') {
																goto l153
															}
															position++
															goto l152
														l153:
															position, tokenIndex = position153, tokenIndex153
														}
														{
															position154, tokenIndex154 := position, tokenIndex
															{
																position156 := position
																{
																	position157, tokenIndex157 := position, tokenIndex
																	if buffer[position] != rune('\t') {
																		goto l158
																	}
																	position++
																	goto l157
																l158:
																	position, tokenIndex = position157, tokenIndex157
																	if c := buffer[position]; c < rune(' ') || c > rune('\U0010ffff') {
																		goto l155
																	}
																	position++
																}
															l157:
																add(rulemlLiteralChar, position156)
															}
															goto l154
														l155:
															position, tokenIndex = position154, tokenIndex154
															if !_rules[rulenewline]() {
																goto l152
															}
														}
													l154:
														goto l151
													l152:
														position, tokenIndex = position152, tokenIndex152
													}
													add(rulemlLiteralBody, position150)
												}
												add(rulePegText, position149)
											}
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											if buffer[position] != rune('\'') {
												goto l147
											}
											position++
											{
												add(ruleAction24, position)
											}
											add(rulemlLiteralString, position148)
										}
										goto l146
									l147:
										position, tokenIndex = position146, tokenIndex146
										{
											position161 := position
											if buffer[position] != rune('\'') {
												goto l160
											}
											position++
											{
												position162 := position
											l163:
												{
													position164, tokenIndex164 := position, tokenIndex
													{
														position165 := position
														{
															switch buffer[position] {
															case '\t':
																if buffer[position] != rune('\t') {
																	goto l164
																}
																position++
															case ' ', '!', '"', '#', '$', '%', '&':
																if c := buffer[position]; c < rune(' ') || c > rune('&') {
																	goto l164
																}
																position++
															default:
																if c := buffer[position]; c < rune('(') || c > rune('\U0010ffff') {
																	goto l164
																}
																position++
															}
														}

														add(ruleliteralChar, position165)
													}
													goto l163
												l164:
													position, tokenIndex = position164, tokenIndex164
												}
												add(rulePegText, position162)
											}
											if buffer[position] != rune('\'') {
												goto l160
											}
											position++
											{
												add(ruleAction23, position)
											}
											add(ruleliteralString, position161)
										}
										goto l146
									l160:
										position, tokenIndex = position146, tokenIndex146
										{
											position169 := position
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											{
												position170 := position
											l171:
												{
													position172, tokenIndex172 := position, tokenIndex
													{
														position173, tokenIndex173 := position, tokenIndex
														{
															position175, tokenIndex175 := position, tokenIndex
															if buffer[position] != rune('"') {
																goto l175
															}
															position++
															if buffer[position] != rune('"') {
																goto l175
															}
															position++
															if buffer[position] != rune('"') {
																goto l175
															}
															position++
															goto l174
														l175:
															position, tokenIndex = position175, tokenIndex175
														}
														if buffer[position] != rune('"') {
															goto l174
														}
														position++
														{
															add(ruleAction21, position)
														}
														goto l173
													l174:
														position, tokenIndex = position173, tokenIndex173
														{
															position178 := position
															{
																position179, tokenIndex179 := position, tokenIndex
																if !_rules[rulebasicChar]() {
																	goto l180
																}
																goto l179
															l180:
																position, tokenIndex = position179, tokenIndex179
																if !_rules[rulenewline]() {
																	goto l177
																}
															}
														l179:
															add(rulePegText, position178)
														}
														{
															add(ruleAction22, position)
														}
														goto l173
													l177:
														position, tokenIndex = position173, tokenIndex173
														if !_rules[ruleescape]() {
															goto l172
														}
														if !_rules[rulenewline]() {
															goto l172
														}
														if !_rules[rulewsnl]() {
															goto l172
														}
													}
												l173:
													goto l171
												l172:
													position, tokenIndex = position172, tokenIndex172
												}
												add(rulemlBasicBody, position170)
											}
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											if buffer[position] != rune('"') {
												goto l168
											}
											position++
											{
												add(ruleAction20, position)
											}
											add(rulemlBasicString, position169)
										}
										goto l146
									l168:
										position, tokenIndex = position146, tokenIndex146
										{
											position183 := position
											{
												position184 := position
												if buffer[position] != rune('"') {
													goto l63
												}
												position++
											l185:
												{
													position186, tokenIndex186 := position, tokenIndex
													if !_rules[rulebasicChar]() {
														goto l186
													}
													goto l185
												l186:
													position, tokenIndex = position186, tokenIndex186
												}
												if buffer[position] != rune('"') {
													goto l63
												}
												position++
												add(rulePegText, position184)
											}
											{
												add(ruleAction19, position)
											}
											add(rulebasicString, position183)
										}
									}
								l146:
									add(rulestring, position145)
								}
								add(rulePegText, position144)
							}
							{
								add(ruleAction7, position)
							}
						default:
							{
								position189 := position
								{
									position190 := position
									{
										position191, tokenIndex191 := position, tokenIndex
										{
											position193 := position
											if buffer[position] != rune('0') {
												goto l192
											}
											position++
											if buffer[position] != rune('x') {
												goto l192
											}
											position++
											if !_rules[rulehexDigit]() {
												goto l192
											}
										l194:
											{
												position195, tokenIndex195 := position, tokenIndex
												{
													position196, tokenIndex196 := position, tokenIndex
													if !_rules[rulehexDigit]() {
														goto l197
													}
													goto l196
												l197:
													position, tokenIndex = position196, tokenIndex196
													if buffer[position] != rune('_') {
														goto l195
													}
													position++
													if !_rules[rulehexDigit]() {
														goto l195
													}
												}
											l196:
												goto l194
											l195:
												position, tokenIndex = position195, tokenIndex195
											}
											add(rulehexInt, position193)
										}
										goto l191
									l192:
										position, tokenIndex = position191, tokenIndex191
										{
											position199 := position
											if buffer[position] != rune('0') {
												goto l198
											}
											position++
											if buffer[position] != rune('o') {
												goto l198
											}
											position++
											if !_rules[ruleoctalDigit]() {
												goto l198
											}
										l200:
											{
												position201, tokenIndex201 := position, tokenIndex
												{
													position202, tokenIndex202 := position, tokenIndex
													if !_rules[ruleoctalDigit]() {
														goto l203
													}
													goto l202
												l203:
													position, tokenIndex = position202, tokenIndex202
													if buffer[position] != rune('_') {
														goto l201
													}
													position++
													if !_rules[ruleoctalDigit]() {
														goto l201
													}
												}
											l202:
												goto l200
											l201:
												position, tokenIndex = position201, tokenIndex201
											}
											add(ruleoctalInt, position199)
										}
										goto l191
									l198:
										position, tokenIndex = position191, tokenIndex191
										{
											position205 := position
											if buffer[position] != rune('0') {
												goto l204
											}
											position++
											if buffer[position] != rune('b') {
												goto l204
											}
											position++
											if !_rules[rulebinaryDigit]() {
												goto l204
											}
										l206:
											{
												position207, tokenIndex207 := position, tokenIndex
												{
													position208, tokenIndex208 := position, tokenIndex
													if !_rules[rulebinaryDigit]() {
														goto l209
													}
													goto l208
												l209:
													position, tokenIndex = position208, tokenIndex208
													if buffer[position] != rune('_') {
														goto l207
													}
													position++
													if !_rules[ruleoctalDigit]() {
														goto l207
													}
												}
											l208:
												goto l206
											l207:
												position, tokenIndex = position207, tokenIndex207
											}
											add(rulebinaryInt, position205)
										}
										goto l191
									l204:
										position, tokenIndex = position191, tokenIndex191
										if !_rules[ruledecimalInt]() {
											goto l210
										}
										goto l191
									l210:
										position, tokenIndex = position191, tokenIndex191
										{
											position211, tokenIndex211 := position, tokenIndex
											if buffer[position] != rune('+') {
												goto l212
											}
											position++
											goto l211
										l212:
											position, tokenIndex = position211, tokenIndex211
											if buffer[position] != rune('-') {
												goto l63
											}
											position++
										}
									l211:
										if !_rules[ruledecimalInt]() {
											goto l63
										}
									}
								l191:
									add(ruleinteger, position190)
								}
								add(rulePegText, position189)
							}
							{
								add(ruleAction6, position)
							}
						}
					}

				}
			l65:
				add(ruleval, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 8 table <- <(stdTable / arrayTable)> */
		nil,
		/* 9 stdTable <- <('[' ws <tableKey> ws ']' Action11)> */
		nil,
		/* 10 arrayTable <- <('[' '[' ws <tableKey> ws (']' ']') Action12)> */
		nil,
		/* 11 inlineTable <- <('{' Action13 ws inlineTableKeyValues ws '}' Action14)> */
		nil,
		/* 12 inlineTableKeyValues <- <(keyval inlineTableValSep?)*> */
		nil,
		/* 13 keyval <- <(key ws '=' ws val Action15)> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				if !_rules[rulekey]() {
					goto l219
				}
				if !_rules[rulews]() {
					goto l219
				}
				if buffer[position] != rune('=') {
					goto l219
				}
				position++
				if !_rules[rulews]() {
					goto l219
				}
				if !_rules[ruleval]() {
					goto l219
				}
				{
					add(ruleAction15, position)
				}
				add(rulekeyval, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 14 key <- <(bareKey / quotedKey)> */
		func() bool {
			position222, tokenIndex222 := position, tokenIndex
			{
				position223 := position
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position226 := position
						{
							position227 := position
							{
								switch buffer[position] {
								case '_':
									if buffer[position] != rune('_') {
										goto l225
									}
									position++
								case '-':
									if buffer[position] != rune('-') {
										goto l225
									}
									position++
								case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
									if c := buffer[position]; c < rune('a') || c > rune('z') {
										goto l225
									}
									position++
								case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l225
									}
									position++
								default:
									if c := buffer[position]; c < rune('A') || c > rune('Z') {
										goto l225
									}
									position++
								}
							}

						l228:
							{
								position229, tokenIndex229 := position, tokenIndex
								{
									switch buffer[position] {
									case '_':
										if buffer[position] != rune('_') {
											goto l229
										}
										position++
									case '-':
										if buffer[position] != rune('-') {
											goto l229
										}
										position++
									case 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z':
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l229
										}
										position++
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l229
										}
										position++
									default:
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l229
										}
										position++
									}
								}

								goto l228
							l229:
								position, tokenIndex = position229, tokenIndex229
							}
							add(rulePegText, position227)
						}
						{
							add(ruleAction16, position)
						}
						add(rulebareKey, position226)
					}
					goto l224
				l225:
					position, tokenIndex = position224, tokenIndex224
					{
						position233 := position
						{
							position234 := position
							if buffer[position] != rune('"') {
								goto l222
							}
							position++
						l235:
							{
								position236, tokenIndex236 := position, tokenIndex
								if !_rules[rulebasicChar]() {
									goto l236
								}
								goto l235
							l236:
								position, tokenIndex = position236, tokenIndex236
							}
							if buffer[position] != rune('"') {
								goto l222
							}
							position++
							add(rulePegText, position234)
						}
						{
							add(ruleAction17, position)
						}
						add(rulequotedKey, position233)
					}
				}
			l224:
				add(rulekey, position223)
			}
			return true
		l222:
			position, tokenIndex = position222, tokenIndex222
			return false
		},
		/* 15 bareKey <- <(<((&('_') '_') | (&('-') '-') | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]))+> Action16)> */
		nil,
		/* 16 quotedKey <- <(<('"' basicChar* '"')> Action17)> */
		nil,
		/* 17 tableKey <- <(tableKeyComp (tableKeySep tableKeyComp)*)> */
		func() bool {
			position240, tokenIndex240 := position, tokenIndex
			{
				position241 := position
				if !_rules[ruletableKeyComp]() {
					goto l240
				}
			l242:
				{
					position243, tokenIndex243 := position, tokenIndex
					{
						position244 := position
						if !_rules[rulews]() {
							goto l243
						}
						if buffer[position] != rune('.') {
							goto l243
						}
						position++
						if !_rules[rulews]() {
							goto l243
						}
						add(ruletableKeySep, position244)
					}
					if !_rules[ruletableKeyComp]() {
						goto l243
					}
					goto l242
				l243:
					position, tokenIndex = position243, tokenIndex243
				}
				add(ruletableKey, position241)
			}
			return true
		l240:
			position, tokenIndex = position240, tokenIndex240
			return false
		},
		/* 18 tableKeyComp <- <(key Action18)> */
		func() bool {
			position245, tokenIndex245 := position, tokenIndex
			{
				position246 := position
				if !_rules[rulekey]() {
					goto l245
				}
				{
					add(ruleAction18, position)
				}
				add(ruletableKeyComp, position246)
			}
			return true
		l245:
			position, tokenIndex = position245, tokenIndex245
			return false
		},
		/* 19 tableKeySep <- <(ws '.' ws)> */
		nil,
		/* 20 inlineTableValSep <- <(ws ',' ws)> */
		nil,
		/* 21 boolean <- <(('t' 'r' 'u' 'e') / ('f' 'a' 'l' 's' 'e'))> */
		nil,
		/* 22 integer <- <(hexInt / octalInt / binaryInt / decimalInt / (('+' / '-') decimalInt))> */
		nil,
		/* 23 decimalInt <- <(([1-9] (decimalDigit / ('_' decimalDigit))+) / decimalDigit)> */
		func() bool {
			position252, tokenIndex252 := position, tokenIndex
			{
				position253 := position
				{
					position254, tokenIndex254 := position, tokenIndex
					if c := buffer[position]; c < rune('1') || c > rune('9') {
						goto l255
					}
					position++
					{
						position258, tokenIndex258 := position, tokenIndex
						if !_rules[ruledecimalDigit]() {
							goto l259
						}
						goto l258
					l259:
						position, tokenIndex = position258, tokenIndex258
						if buffer[position] != rune('_') {
							goto l255
						}
						position++
						if !_rules[ruledecimalDigit]() {
							goto l255
						}
					}
				l258:
				l256:
					{
						position257, tokenIndex257 := position, tokenIndex
						{
							position260, tokenIndex260 := position, tokenIndex
							if !_rules[ruledecimalDigit]() {
								goto l261
							}
							goto l260
						l261:
							position, tokenIndex = position260, tokenIndex260
							if buffer[position] != rune('_') {
								goto l257
							}
							position++
							if !_rules[ruledecimalDigit]() {
								goto l257
							}
						}
					l260:
						goto l256
					l257:
						position, tokenIndex = position257, tokenIndex257
					}
					goto l254
				l255:
					position, tokenIndex = position254, tokenIndex254
					if !_rules[ruledecimalDigit]() {
						goto l252
					}
				}
			l254:
				add(ruledecimalInt, position253)
			}
			return true
		l252:
			position, tokenIndex = position252, tokenIndex252
			return false
		},
		/* 24 decimalDigit <- <[0-9]> */
		func() bool {
			position262, tokenIndex262 := position, tokenIndex
			{
				position263 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l262
				}
				position++
				add(ruledecimalDigit, position263)
			}
			return true
		l262:
			position, tokenIndex = position262, tokenIndex262
			return false
		},
		/* 25 hexInt <- <('0' 'x' hexDigit (hexDigit / ('_' hexDigit))*)> */
		nil,
		/* 26 hexDigit <- <((&('a' | 'b' | 'c' | 'd' | 'e' | 'f') [a-f]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F') [A-F]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]))> */
		func() bool {
			position265, tokenIndex265 := position, tokenIndex
			{
				position266 := position
				{
					switch buffer[position] {
					case 'a', 'b', 'c', 'd', 'e', 'f':
						if c := buffer[position]; c < rune('a') || c > rune('f') {
							goto l265
						}
						position++
					case 'A', 'B', 'C', 'D', 'E', 'F':
						if c := buffer[position]; c < rune('A') || c > rune('F') {
							goto l265
						}
						position++
					default:
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l265
						}
						position++
					}
				}

				add(rulehexDigit, position266)
			}
			return true
		l265:
			position, tokenIndex = position265, tokenIndex265
			return false
		},
		/* 27 octalInt <- <('0' 'o' octalDigit (octalDigit / ('_' octalDigit))*)> */
		nil,
		/* 28 octalDigit <- <[0-7]> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				if c := buffer[position]; c < rune('0') || c > rune('7') {
					goto l269
				}
				position++
				add(ruleoctalDigit, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 29 binaryInt <- <('0' 'b' binaryDigit (binaryDigit / ('_' octalDigit))*)> */
		nil,
		/* 30 binaryDigit <- <('0' / '1')> */
		func() bool {
			position272, tokenIndex272 := position, tokenIndex
			{
				position273 := position
				{
					position274, tokenIndex274 := position, tokenIndex
					if buffer[position] != rune('0') {
						goto l275
					}
					position++
					goto l274
				l275:
					position, tokenIndex = position274, tokenIndex274
					if buffer[position] != rune('1') {
						goto l272
					}
					position++
				}
			l274:
				add(rulebinaryDigit, position273)
			}
			return true
		l272:
			position, tokenIndex = position272, tokenIndex272
			return false
		},
		/* 31 float <- <(('+' / '-')? ((&('i') ('i' 'n' 'f')) | (&('n') ('n' 'a' 'n')) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') floatDigits)))> */
		nil,
		/* 32 floatDigits <- <(decimalInt ((floatFrac floatExp?) / (floatFrac? floatExp)))> */
		nil,
		/* 33 floatFrac <- <('.' decimalDigit (decimalDigit / ('_' decimalDigit))*)> */
		func() bool {
			position278, tokenIndex278 := position, tokenIndex
			{
				position279 := position
				if buffer[position] != rune('.') {
					goto l278
				}
				position++
				if !_rules[ruledecimalDigit]() {
					goto l278
				}
			l280:
				{
					position281, tokenIndex281 := position, tokenIndex
					{
						position282, tokenIndex282 := position, tokenIndex
						if !_rules[ruledecimalDigit]() {
							goto l283
						}
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('_') {
							goto l281
						}
						position++
						if !_rules[ruledecimalDigit]() {
							goto l281
						}
					}
				l282:
					goto l280
				l281:
					position, tokenIndex = position281, tokenIndex281
				}
				add(rulefloatFrac, position279)
			}
			return true
		l278:
			position, tokenIndex = position278, tokenIndex278
			return false
		},
		/* 34 floatExp <- <(('e' / 'E') ('-' / '+')? decimalDigit (decimalDigit / ('_' decimalDigit))*)> */
		func() bool {
			position284, tokenIndex284 := position, tokenIndex
			{
				position285 := position
				{
					position286, tokenIndex286 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l287
					}
					position++
					goto l286
				l287:
					position, tokenIndex = position286, tokenIndex286
					if buffer[position] != rune('E') {
						goto l284
					}
					position++
				}
			l286:
				{
					position288, tokenIndex288 := position, tokenIndex
					{
						position290, tokenIndex290 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l291
						}
						position++
						goto l290
					l291:
						position, tokenIndex = position290, tokenIndex290
						if buffer[position] != rune('+') {
							goto l288
						}
						position++
					}
				l290:
					goto l289
				l288:
					position, tokenIndex = position288, tokenIndex288
				}
			l289:
				if !_rules[ruledecimalDigit]() {
					goto l284
				}
			l292:
				{
					position293, tokenIndex293 := position, tokenIndex
					{
						position294, tokenIndex294 := position, tokenIndex
						if !_rules[ruledecimalDigit]() {
							goto l295
						}
						goto l294
					l295:
						position, tokenIndex = position294, tokenIndex294
						if buffer[position] != rune('_') {
							goto l293
						}
						position++
						if !_rules[ruledecimalDigit]() {
							goto l293
						}
					}
				l294:
					goto l292
				l293:
					position, tokenIndex = position293, tokenIndex293
				}
				add(rulefloatExp, position285)
			}
			return true
		l284:
			position, tokenIndex = position284, tokenIndex284
			return false
		},
		/* 35 escaped <- <(escape ((&('U') ('U' hexQuad hexQuad)) | (&('u') ('u' hexQuad)) | (&('\\') '\\') | (&('/') '/') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		nil,
		/* 36 escape <- <'\\'> */
		func() bool {
			position297, tokenIndex297 := position, tokenIndex
			{
				position298 := position
				if buffer[position] != rune('\\') {
					goto l297
				}
				position++
				add(ruleescape, position298)
			}
			return true
		l297:
			position, tokenIndex = position297, tokenIndex297
			return false
		},
		/* 37 hexQuad <- <(hexDigit hexDigit hexDigit hexDigit)> */
		func() bool {
			position299, tokenIndex299 := position, tokenIndex
			{
				position300 := position
				if !_rules[rulehexDigit]() {
					goto l299
				}
				if !_rules[rulehexDigit]() {
					goto l299
				}
				if !_rules[rulehexDigit]() {
					goto l299
				}
				if !_rules[rulehexDigit]() {
					goto l299
				}
				add(rulehexQuad, position300)
			}
			return true
		l299:
			position, tokenIndex = position299, tokenIndex299
			return false
		},
		/* 38 string <- <(mlLiteralString / literalString / mlBasicString / basicString)> */
		nil,
		/* 39 basicString <- <(<('"' basicChar* '"')> Action19)> */
		nil,
		/* 40 basicChar <- <(basicUnescaped / escaped)> */
		func() bool {
			position303, tokenIndex303 := position, tokenIndex
			{
				position304 := position
				{
					position305, tokenIndex305 := position, tokenIndex
					{
						position307 := position
						{
							switch buffer[position] {
							case '\t':
								if buffer[position] != rune('\t') {
									goto l306
								}
								position++
							case ' ', '!':
								if c := buffer[position]; c < rune(' ') || c > rune('!') {
									goto l306
								}
								position++
							case '#', '$', '%', '&', '\'', '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[':
								if c := buffer[position]; c < rune('#') || c > rune('[') {
									goto l306
								}
								position++
							default:
								if c := buffer[position]; c < rune(']') || c > rune('\U0010ffff') {
									goto l306
								}
								position++
							}
						}

						add(rulebasicUnescaped, position307)
					}
					goto l305
				l306:
					position, tokenIndex = position305, tokenIndex305
					{
						position309 := position
						if !_rules[ruleescape]() {
							goto l303
						}
						{
							switch buffer[position] {
							case 'U':
								if buffer[position] != rune('U') {
									goto l303
								}
								position++
								if !_rules[rulehexQuad]() {
									goto l303
								}
								if !_rules[rulehexQuad]() {
									goto l303
								}
							case 'u':
								if buffer[position] != rune('u') {
									goto l303
								}
								position++
								if !_rules[rulehexQuad]() {
									goto l303
								}
							case '\\':
								if buffer[position] != rune('\\') {
									goto l303
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l303
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l303
								}
								position++
							case 'r':
								if buffer[position] != rune('r') {
									goto l303
								}
								position++
							case 'f':
								if buffer[position] != rune('f') {
									goto l303
								}
								position++
							case 'n':
								if buffer[position] != rune('n') {
									goto l303
								}
								position++
							case 't':
								if buffer[position] != rune('t') {
									goto l303
								}
								position++
							default:
								if buffer[position] != rune('b') {
									goto l303
								}
								position++
							}
						}

						add(ruleescaped, position309)
					}
				}
			l305:
				add(rulebasicChar, position304)
			}
			return true
		l303:
			position, tokenIndex = position303, tokenIndex303
			return false
		},
		/* 41 basicUnescaped <- <((&('\t') '\t') | (&(' ' | '!') [ -!]) | (&('#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[') [#-[]) | (&(']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' | '\u007f' | '\u0080' | '\u0081' | '\u0082' | '\u0083' | '\u0084' | '\u0085' | '\u0086' | '\u0087' | '\u0088' | '\u0089' | '\u008a' | '\u008b' | '\u008c' | '\u008d' | '\u008e' | '\u008f' | '\u0090' | '\u0091' | '\u0092' | '\u0093' | '\u0094' | '\u0095' | '\u0096' | '\u0097' | '\u0098' | '\u0099' | '\u009a' | '\u009b' | '\u009c' | '\u009d' | '\u009e' | '\u009f' | '\u00a0' | '¡' | '¢' | '£' | '¤' | '¥' | '¦' | '§' | '¨' | '©' | 'ª' | '«' | '¬' | '\u00ad' | '®' | '¯' | '°' | '±' | '²' | '³' | '´' | 'µ' | '¶' | '·' | '¸' | '¹' | 'º' | '»' | '¼' | '½' | '¾' | '¿' | 'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó' | 'Ô' | 'Õ' | 'Ö' | '×' | 'Ø' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Þ' | 'ß' | 'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó' | 'ô' | 'õ' | 'ö' | '÷' | 'ø' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'þ' | 'ÿ') []-\U0010ffff]))> */
		nil,
		/* 42 mlBasicString <- <('"' '"' '"' mlBasicBody ('"' '"' '"') Action20)> */
		nil,
		/* 43 mlBasicBody <- <((!('"' '"' '"') '"' Action21) / (<(basicChar / newline)> Action22) / (escape newline wsnl))*> */
		nil,
		/* 44 literalString <- <('\'' <literalChar*> '\'' Action23)> */
		nil,
		/* 45 literalChar <- <((&('\t') '\t') | (&(' ' | '!' | '"' | '#' | '$' | '%' | '&') [ -&]) | (&('(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' | '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | ':' | ';' | '<' | '=' | '>' | '?' | '@' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | '[' | '\\' | ']' | '^' | '_' | '`' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z' | '{' | '|' | '}' | '~' | '\u007f' | '\u0080' | '\u0081' | '\u0082' | '\u0083' | '\u0084' | '\u0085' | '\u0086' | '\u0087' | '\u0088' | '\u0089' | '\u008a' | '\u008b' | '\u008c' | '\u008d' | '\u008e' | '\u008f' | '\u0090' | '\u0091' | '\u0092' | '\u0093' | '\u0094' | '\u0095' | '\u0096' | '\u0097' | '\u0098' | '\u0099' | '\u009a' | '\u009b' | '\u009c' | '\u009d' | '\u009e' | '\u009f' | '\u00a0' | '¡' | '¢' | '£' | '¤' | '¥' | '¦' | '§' | '¨' | '©' | 'ª' | '«' | '¬' | '\u00ad' | '®' | '¯' | '°' | '±' | '²' | '³' | '´' | 'µ' | '¶' | '·' | '¸' | '¹' | 'º' | '»' | '¼' | '½' | '¾' | '¿' | 'À' | 'Á' | 'Â' | 'Ã' | 'Ä' | 'Å' | 'Æ' | 'Ç' | 'È' | 'É' | 'Ê' | 'Ë' | 'Ì' | 'Í' | 'Î' | 'Ï' | 'Ð' | 'Ñ' | 'Ò' | 'Ó' | 'Ô' | 'Õ' | 'Ö' | '×' | 'Ø' | 'Ù' | 'Ú' | 'Û' | 'Ü' | 'Ý' | 'Þ' | 'ß' | 'à' | 'á' | 'â' | 'ã' | 'ä' | 'å' | 'æ' | 'ç' | 'è' | 'é' | 'ê' | 'ë' | 'ì' | 'í' | 'î' | 'ï' | 'ð' | 'ñ' | 'ò' | 'ó' | 'ô' | 'õ' | 'ö' | '÷' | 'ø' | 'ù' | 'ú' | 'û' | 'ü' | 'ý' | 'þ' | 'ÿ') [(-\U0010ffff]))> */
		nil,
		/* 46 mlLiteralString <- <('\'' '\'' '\'' <mlLiteralBody> ('\'' '\'' '\'') Action24)> */
		nil,
		/* 47 mlLiteralBody <- <(!('\'' '\'' '\'') (mlLiteralChar / newline))*> */
		nil,
		/* 48 mlLiteralChar <- <('\t' / [ -\U0010ffff])> */
		nil,
		/* 49 datetime <- <((fullDate (((&(' ') ' ') | (&('t') 't') | (&('T') 'T')) fullTime)?) / partialTime)> */
		nil,
		/* 50 partialTime <- <(timeHour ':' timeMinute ':' timeSecond timeSecfrac?)> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				if !_rules[ruletimeHour]() {
					goto l320
				}
				if buffer[position] != rune(':') {
					goto l320
				}
				position++
				if !_rules[ruletimeMinute]() {
					goto l320
				}
				if buffer[position] != rune(':') {
					goto l320
				}
				position++
				{
					position322 := position
					if !_rules[ruledigitDual]() {
						goto l320
					}
					add(ruletimeSecond, position322)
				}
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position325 := position
						if buffer[position] != rune('.') {
							goto l323
						}
						position++
						if !_rules[ruledecimalDigit]() {
							goto l323
						}
					l326:
						{
							position327, tokenIndex327 := position, tokenIndex
							if !_rules[ruledecimalDigit]() {
								goto l327
							}
							goto l326
						l327:
							position, tokenIndex = position327, tokenIndex327
						}
						add(ruletimeSecfrac, position325)
					}
					goto l324
				l323:
					position, tokenIndex = position323, tokenIndex323
				}
			l324:
				add(rulepartialTime, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 51 fullDate <- <(dateFullYear '-' dateMonth '-' dateMDay)> */
		nil,
		/* 52 fullTime <- <(partialTime timeOffset?)> */
		nil,
		/* 53 dateFullYear <- <digitQuad> */
		nil,
		/* 54 dateMonth <- <digitDual> */
		nil,
		/* 55 dateMDay <- <digitDual> */
		nil,
		/* 56 timeHour <- <digitDual> */
		func() bool {
			position333, tokenIndex333 := position, tokenIndex
			{
				position334 := position
				if !_rules[ruledigitDual]() {
					goto l333
				}
				add(ruletimeHour, position334)
			}
			return true
		l333:
			position, tokenIndex = position333, tokenIndex333
			return false
		},
		/* 57 timeMinute <- <digitDual> */
		func() bool {
			position335, tokenIndex335 := position, tokenIndex
			{
				position336 := position
				if !_rules[ruledigitDual]() {
					goto l335
				}
				add(ruletimeMinute, position336)
			}
			return true
		l335:
			position, tokenIndex = position335, tokenIndex335
			return false
		},
		/* 58 timeSecond <- <digitDual> */
		nil,
		/* 59 timeSecfrac <- <('.' decimalDigit+)> */
		nil,
		/* 60 timeNumoffset <- <(('-' / '+') timeHour ':' timeMinute)> */
		nil,
		/* 61 timeOffset <- <((&('z') 'z') | (&('Z') 'Z') | (&('+' | '-') timeNumoffset))> */
		nil,
		/* 62 digitDual <- <(decimalDigit decimalDigit)> */
		func() bool {
			position341, tokenIndex341 := position, tokenIndex
			{
				position342 := position
				if !_rules[ruledecimalDigit]() {
					goto l341
				}
				if !_rules[ruledecimalDigit]() {
					goto l341
				}
				add(ruledigitDual, position342)
			}
			return true
		l341:
			position, tokenIndex = position341, tokenIndex341
			return false
		},
		/* 63 digitQuad <- <(digitDual digitDual)> */
		nil,
		/* 64 array <- <('[' Action25 wsnl arrayValues? wsnl ']')> */
		nil,
		/* 65 arrayValues <- <((wsnl comment)* wsnl val Action26 ((wsnl comment)* wsnl arraySep (wsnl comment)* wsnl val Action27)* (wsnl comment)* wsnl arraySep? (wsnl comment)*)> */
		nil,
		/* 66 arraySep <- <','> */
		func() bool {
			position346, tokenIndex346 := position, tokenIndex
			{
				position347 := position
				if buffer[position] != rune(',') {
					goto l346
				}
				position++
				add(rulearraySep, position347)
			}
			return true
		l346:
			position, tokenIndex = position346, tokenIndex346
			return false
		},
		/* 68 Action0 <- <{ _ = buffer }> */
		nil,
		nil,
		/* 70 Action1 <- <{ p.SetTableSource(begin, end) }> */
		nil,
		/* 71 Action2 <- <{ p.Newline() }> */
		nil,
		/* 72 Action3 <- <{ p.Error(errNewlineRequired) }> */
		nil,
		/* 73 Action4 <- <{ p.SetTime(begin, end) }> */
		nil,
		/* 74 Action5 <- <{ p.SetFloat(begin, end) }> */
		nil,
		/* 75 Action6 <- <{ p.SetInteger(begin, end) }> */
		nil,
		/* 76 Action7 <- <{ p.SetString(begin, end) }> */
		nil,
		/* 77 Action8 <- <{ p.SetBool(begin, end) }> */
		nil,
		/* 78 Action9 <- <{ p.SetArray(begin, end) }> */
		nil,
		/* 79 Action10 <- <{ p.SetInlineTableSource(begin, end) }> */
		nil,
		/* 80 Action11 <- <{ p.SetTable(p.buffer, begin, end) }> */
		nil,
		/* 81 Action12 <- <{ p.SetArrayTable(p.buffer, begin, end) }> */
		nil,
		/* 82 Action13 <- <{ p.StartInlineTable() }> */
		nil,
		/* 83 Action14 <- <{ p.EndInlineTable() }> */
		nil,
		/* 84 Action15 <- <{ p.AddKeyValue() }> */
		nil,
		/* 85 Action16 <- <{ p.SetKey(p.buffer, begin, end) }> */
		nil,
		/* 86 Action17 <- <{ p.SetKey(p.buffer, begin, end) }> */
		nil,
		/* 87 Action18 <- <{ p.AddTableKey() }> */
		nil,
		/* 88 Action19 <- <{ p.SetBasicString(p.buffer, begin, end) }> */
		nil,
		/* 89 Action20 <- <{ p.SetMultilineBasicString() }> */
		nil,
		/* 90 Action21 <- <{ p.AddMultilineBasicQuote() }> */
		nil,
		/* 91 Action22 <- <{ p.AddMultilineBasicBody(p.buffer, begin, end) }> */
		nil,
		/* 92 Action23 <- <{ p.SetLiteralString(p.buffer, begin, end) }> */
		nil,
		/* 93 Action24 <- <{ p.SetMultilineLiteralString(p.buffer, begin, end) }> */
		nil,
		/* 94 Action25 <- <{ p.StartArray() }> */
		nil,
		/* 95 Action26 <- <{ p.AddArrayVal() }> */
		nil,
		/* 96 Action27 <- <{ p.AddArrayVal() }> */
		nil,
	}
	p.rules = _rules
	return nil
}
